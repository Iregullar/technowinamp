import aiofiles
import ffmpeg
import asyncio
import os
import shutil
import psutil
import subprocess
import requests
import aiohttp
import yt_dlp
import aiohttp
import random

from os import path
from typing import Union
from asyncio import QueueEmpty
from PIL import Image, ImageFont, ImageDraw, ImageFilter
from PIL import ImageGrab
from typing import Callable

from pytgcalls import StreamType
from pytgcalls.types.input_stream import InputStream
from pytgcalls.types.input_stream import InputAudioStream

from youtube_search import YoutubeSearch

from pyrogram import Client, filters
from pyrogram.types import (
    Message,
    Voice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from pyrogram.errors import UserAlreadyParticipant, UserNotParticipant
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import ChatAdminRequired, UserNotParticipant, ChatWriteForbidden


from Codexun.tgcalls import calls, queues
from Codexun.tgcalls.youtube import download
from Codexun.tgcalls import convert as cconvert
from Codexun.tgcalls.calls import client as ASS_ACC
from Codexun.database.queue import (
    get_active_chats,
    is_active_chat,
    add_active_chat,
    remove_active_chat,
    music_on,
    is_music_playing,
    music_off,
)
from Codexun import app
import Codexun.tgcalls
from Codexun.tgcalls import youtube
from Codexun.config import (
    DURATION_LIMIT,
    que,
    SUDO_USERS,
    BOT_ID,
    ASSNAME,
    ASSUSERNAME,
    ASSID,
    START_IMG,
    SUPPORT,
    UPDATE,
    BOT_NAME,
    BOT_USERNAME,
)
from Codexun.utils.filters import command
from Codexun.utils.decorators import errors, sudo_users_only
from Codexun.utils.administrator import adminsOnly
from Codexun.utils.errors import DurationLimitError
from Codexun.utils.gets import get_url, get_file_name
from Codexun.modules.admins import member_permissions


def others_markup(videoid, user_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚ñ∑", callback_data=f"resumevc"),
            InlineKeyboardButton(text="II", callback_data=f"pausevc"),
            InlineKeyboardButton(text="‚Ä£‚Ä£I", callback_data=f"skipvc"),
            InlineKeyboardButton(text="‚ñ¢", callback_data=f"stopvc"),
        ],[
            InlineKeyboardButton(text="Sistem", callback_data=f"cls"),
        ],
        
    ]
    return buttons


fifth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200% üîä", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)

fourth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150% üîä", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)

third_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100% üîä", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)

second_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50% üîä", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)

first_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20% üîä", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)
highquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("D√º≈ü√ºk Kalite", callback_data="low"),],
         [   InlineKeyboardButton("Orta Kalite", callback_data="medium"),
            
        ],[   InlineKeyboardButton("Y√ºksek Kalite ‚úÖ", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Kapat üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)
lowquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("D√º≈ü√ºk Kalite ‚úÖ", callback_data="low"),],
         [   InlineKeyboardButton("Orta Kalite", callback_data="medium"),
            
        ],[   InlineKeyboardButton("Y√ºksek Kalite", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Kapat üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)
mediumquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("D√º≈ü√ºk Kalite", callback_data="low"),],
         [   InlineKeyboardButton("Orta Kalite ‚úÖ", callback_data="medium"),
            
        ],[   InlineKeyboardButton("Y√ºksek Kalite", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Kapat üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)

dbclean_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("Evet, Devam edin !", callback_data="cleandb"),],
        [    InlineKeyboardButton("Hayƒ±r, ƒ∞ptal Et !", callback_data="cbmenu"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Geri", callback_data=f"cbmenu"),
        ],
    ]
)
menu_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("‚ñ∑", callback_data="resumevc"),
            InlineKeyboardButton("II", callback_data="pausevc"),
            InlineKeyboardButton("‚Ä£‚Ä£I", callback_data="skipvc"),
            InlineKeyboardButton("‚ñ¢", callback_data="stopvc"),
            
        ],[
            InlineKeyboardButton(text="Ses", callback_data=f"fifth"),
             InlineKeyboardButton(text="Kalite", callback_data=f"high"),
        ],[
            InlineKeyboardButton(text="Listeyi Sil", callback_data=f"dbconfirm"),
             InlineKeyboardButton(text="Hakkƒ±nda", callback_data=f"nonabout"),
        ],[
             InlineKeyboardButton(text="üóëÔ∏è Men√ºy√º Kapat", callback_data=f"cls"),
        ],
    ]
)




@Client.on_message(command(["menu", "settings"]) & filters.group & ~filters.edited)
async def menu(client: Client, message: Message):
    await message.reply_photo(
        photo=f"{START_IMG}",
        caption=f"""**Merhaba {message.from_user.mention()}** üëã
Ben, Gruplarƒ±nƒ±zdaki sesli sohbette m√ºzik √ßalmayƒ± y√∂netebileceƒüiniz men√º b√∂l√ºm√ºd√ºr. Y√∂netmek i√ßin verilen d√ºƒümeleri kullanƒ±n!""",
    reply_markup=menu_keyboard
    )

@Client.on_callback_query(filters.regex("skipvc"))
async def skipvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
Sesli sohbet y√∂netme izniniz olmasƒ± gerekir.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    chat_title = CallbackQuery.message.chat.title
    if await is_active_chat(chat_id):
            user_id = CallbackQuery.from_user.id
            await remove_active_chat(chat_id)
            user_name = CallbackQuery.from_user.first_name
            rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
            await CallbackQuery.answer()
            await CallbackQuery.message.reply(
                f"""
**{rpk}Tarafƒ±ndan Kullanƒ±lan Atla D√ºƒümesi** 
‚Ä¢Kuyrukta daha fazla ≈üarkƒ± yok
`Sesli Sohbetten Ayrƒ±lƒ±yorum..`
"""
            )
            await calls.pytgcalls.leave_group_call(chat_id)
            return
            await CallbackQuery.answer("Sesli Sohbeti Atlatƒ±ldƒ±..!", show_alert=True)     

@Client.on_callback_query(filters.regex("pausevc"))
async def pausevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Sesli sohbet y√∂netme izniniz olmasƒ± gerekir",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await music_off(chat_id)
            await calls.pytgcalls.pause_stream(chat_id)
            await CallbackQuery.answer("M√ºzik Ba≈üarƒ±yla Duraklatƒ±ldƒ±..", show_alert=True)
            
        else:
            await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor!", show_alert=True)
            return
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor!", show_alert=True)


@Client.on_callback_query(filters.regex("resumevc"))
async def resumevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
Sesli sohbet y√∂netme izniniz olmasƒ± gerekir.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await CallbackQuery.answer(
                "Sesli sohbette hi√ßbir ≈üey duraklatƒ±lmadƒ±..",
                show_alert=True,
            )
            return
        else:
            await music_on(chat_id)
            await calls.pytgcalls.resume_stream(chat_id)
            await CallbackQuery.answer("M√ºzik ba≈üarƒ±yla devam etti.", show_alert=True)
            
    else:
        await CallbackQuery.answer(f"Hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)


@Client.on_callback_query(filters.regex("stopvc"))
async def stopvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Sesli sohbet y√∂netme izniniz olmasƒ± gerekir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("M√ºzik akƒ±≈üƒ± sona erdi.", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.message.reply(f"**M√ºzik {rpk} tarafƒ±ndan ba≈üarƒ±yla durduruldu.**")
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("cleandb"))
async def cleandb(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Sesli sohbet y√∂netme izniniz olmasƒ± gerekir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("Liste Temizlendi", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.edit_message_text(
        f"‚úÖ __Kuyruklar ba≈üarƒ±yla silindi__\n‚îÇ\n‚ï∞ Veritabanƒ± {rpk} tarafƒ±ndan temizlendi",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("Kapat üóëÔ∏è", callback_data="cls")]])
        
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)


@Client.on_callback_query(filters.regex("cbcmnds"))
async def cbcmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**{BOT_NAME} Komutlarƒ± üí°**

‚Ä¢ /play /oynat (Song Name /≈ûarkƒ± Adƒ±) 
- For playing music
- M√ºzik √ßalmak i√ßin


‚Ä¢ /pause /durdur
- For pausing music
- M√ºziƒüi duraklatmak i√ßin

‚Ä¢ /resume /devam
- For resuming music
- M√ºziƒüe devam etmek i√ßin

‚Ä¢ /skip /atla
- For skipping current song
- Ge√ßerli ≈üarkƒ±yƒ± atlamak i√ßin

‚Ä¢ /search /bul (song name) 
- For searching music
- M√ºzik aramak i√ßin

‚Ä¢ /song /indir
- For download music
- M√ºzik indirmek i√ßin

‚Ä¢ /menu  /settings
- For open menu settings
- Men√º ayarlarƒ± i√ßin

Daha Fazla **@{UPDATE}** !""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton(
                        "Menu", callback_data="cbstgs"),
                    InlineKeyboardButton(
                        "Sahip Komutlarƒ±", callback_data="cbowncmnds")
                ],
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbhome")]]
        ),
    )
@Client.on_callback_query(filters.regex("cbowncmnds"))
async def cbowncmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Sahip Komutlarƒ± üí°**

‚Ä¢ /reklam (Mesaj)
- Bilgilendirme Mesajlarƒ± i√ßin

‚Ä¢ /sreklam (Mesaj) 
- Pƒ±n ile mesaj yayƒ±nƒ±

‚Ä¢ /restart 
- Botu sunucudan yeniden ba≈ülat

‚Ä¢ /ayrƒ±l
- T√ºm sohbetlerden asistanƒ± bƒ±rakmak

Daha Fazla **@{UPDATE}** !""",
        reply_markup=InlineKeyboardMarkup(
            [
              
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbcmnds")]]
        ),
    )

@Client.on_callback_query(filters.regex("cbabout"))
async def cbabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**{BOT_NAME} Hakkƒ±nda  üí°**

**[{BOT_NAME}](https://t.me/{BOT_USERNAME})** M√ºzik Botu **@OrmanCocuklariylaMucadele** Tarafƒ±ndan gruplarƒ±nƒ±zƒ±n sesli sohbetinde y√ºksek kaliteli ve kƒ±rƒ±lmaz bir m√ºzik √ßalmak i√ßin tasarlanmƒ±≈ü bottur.

Bu bot, m√ºzik √ßalmanƒ±za, youtube'dan m√ºzik aramanƒ±za ve youtube sunucusundan m√ºzik indirmenize ve telegram sesli sohbet √∂zelliƒüi ile ilgili daha bir√ßok √∂zelliƒüe yardƒ±mcƒ± olur.

**Asistan :- @{ASSUSERNAME}**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("Destek üö∂", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("Kanal ü§ñ", url=f"https://t.me/{UPDATE}")
                ],
            [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbstgs"))
async def cbstgs(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Men√º D√ºƒümeleri Hakkƒ±nda üí°**

≈ûarkƒ±nƒ±zƒ± √ßaldƒ±ktan sonra, sesli sohbette √ßalan m√ºziƒüinizi y√∂netmek i√ßin bazƒ± men√º d√ºƒümeleri gelecektir. Bunlar a≈üaƒüƒ±daki gibidir :

‚Ä¢ ‚ñ∑ 
- Durdur
‚Ä¢ II 
- Devam
‚Ä¢ ‚ñ¢  
- Son
‚Ä¢ ‚Ä£‚Ä£ 
- Atla

Bu men√ºy√º /menu ve /settings komutuyla da a√ßabilirsiniz.

**Bu butonlarƒ± sadece y√∂neticiler kullanabilir üìç**""",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbcmnds")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbguide"))
async def cbguide(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Temel Kƒ±lavuzu Dikkatlice Okuyun üí°**

* √ñnce bu botu grubunuza ekleyin

* Bir bot y√∂neticisi olun

* Gerekli y√∂netici iznini verin

* Grubunuza /reload yazƒ±n 

* Gruplarƒ±nƒ±zƒ±n sesli sohbetini ba≈ülatƒ±n

* ≈ûimdi ≈üarkƒ±nƒ± √ßal ve tadƒ±nƒ± √ßƒ±kar !""",
        reply_markup=InlineKeyboardMarkup(
            [[
              InlineKeyboardButton("Ortak Hata", callback_data="cberror")],
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cberror"))
async def cberror(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**√áoƒüunlukla Hatalarla Kar≈üƒ± Kar≈üƒ±ya Kaldƒ±  üí°**

√áoƒüunlukla, m√ºzik asistanƒ± ile ilgili ana hata olacaktƒ±r. Grubunuzda herhangi bir hatayla kar≈üƒ±la≈üƒ±yorsanƒ±z, o zaman √∂nce grubunuzda @{ASSUSERNAME} √∂ƒüesinin kullanƒ±labilir olduƒüundan emin olun. Deƒüilse, manuel olarak ekleyin ve bundan √∂nce de sohbetinizde yasaklanmadƒ±ƒüƒ±ndan emin olun.\n\n**Asistan :- @{ASSUSERNAME}**\n\n**Te≈üekk√ºrler !**""",
        reply_markup=InlineKeyboardMarkup(
            [
            [
                    InlineKeyboardButton("Asistan üôãüèª‚Äç‚ôÇÔ∏è", url=f"https://t.me/{ASSUSERNAME}")
                ],
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbguide")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbtuto"))
async def cbtuto(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Make Your Own Bot Like thisüí°**

Good news! Now you can allow to make your own music bot like to this one. You will be get repo link below just click on it and follow steps!

If you didn't know how to make your own bot then contact us at @TeamCodexun and get help from us.

**üîó Repo Link : https://github.com/PavanMagar/CodexunMusicBot**

**Thanks !""",
       reply_markup=InlineKeyboardMarkup(
            [[
                    InlineKeyboardButton("Get Repo üì¶", url=f"https://github.com/PavanMagar/CodexunMusicBot")
                ],
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbabout")]]
        ),
    )

@Client.on_callback_query(filters.regex("cbhome"))
async def cbhome(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**Ho≈ügeldiniz [{query.message.chat.first_name}](tg://user?id={query.message.chat.id})** üëã

Ben **[{BOT_NAME}](https://t.me/{BOT_USERNAME}) ,** Gruplarƒ±nƒ±zdaki sesli sohbette y√ºksek kaliteli ve kƒ±rƒ±lmaz m√ºzik √ßalmak i√ßin kullanƒ±lan bir botum.

Sadece beni grubunuza ekleyin ve doƒüru eylemleri ger√ßekle≈ütirmek i√ßin gerekli y√∂netici izinlerine sahip bir y√∂netici olarak yapƒ±n, ≈üimdi m√ºziƒüinizin tadƒ±nƒ± √ßƒ±karalƒ±m!

Daha fazla bilgi i√ßin verilen d√ºƒümeleri kullanƒ±n üìç""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "Komutlar", callback_data="cbcmnds"),
                    InlineKeyboardButton(
                        "Hakkƒ±nda", callback_data="cbabout")
                ],
                [
                    InlineKeyboardButton(
                        "Basit Komutlar", callback_data="cbguide")
                ],
                [
                    InlineKeyboardButton(
                        "‚úö Beni Grubuna Ekle ‚úö", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
                ]
                
           ]
        ),
    )

@Client.on_callback_query(filters.regex(pattern=r"^(cls)$"))
async def closed(_, query: CallbackQuery):
    from_user = query.from_user
    permissions = await member_permissions(query.message.chat.id, from_user.id)
    permission = "can_restrict_members"
    if permission not in permissions:
        return await query.answer(
            "Bu eylemi ger√ßekle≈ütirmek i√ßin yeterli izniniz yok.",
            show_alert=True,
        )
    await query.message.delete()

@Client.on_callback_query(filters.regex("cbmenu"))
async def cbmenu(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("Sen ƒ∞simsiz bir Y√∂neticisin!\n\nY√∂netici haklarƒ±ndan kullanƒ±cƒ± hesabƒ±na geri d√∂n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("Sadece y√∂neticiler bunu kullanƒ±r..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**‚öôÔ∏è {BOT_NAME} Ayarlarƒ±**\n\nüìÆ Grup : {query.message.chat.title}.\nüìñ Grup ID : {query.message.chat.id}\n\n**A≈üaƒüƒ±da Verilen Tu≈ülara Basarak Gruplarƒ±nƒ±zƒ±n M√ºzik Sistemini Y√∂netin üí°**",

              reply_markup=menu_keyboard
         )
    else:
        await query.answer("≈ûu anda hi√ßbir ≈üey akƒ±≈ü halinde deƒüil", show_alert=True)



@Client.on_callback_query(filters.regex("high"))
async def high(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi y√ºksek kalitede akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes kalitesini y√∂netmek i√ßin a≈üaƒüƒ±daki se√ßenekten se√ßiminizi yapƒ±n.",
        reply_markup=highquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)


@Client.on_callback_query(filters.regex("low"))
async def low(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi d√º≈ü√ºk kalitede akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes kalitesini y√∂netmek i√ßin a≈üaƒüƒ±daki se√ßenekten se√ßiminizi yapƒ±n.",
        reply_markup=lowquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("medium"))
async def medium(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi orta kalitede akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes kalitesini y√∂netmek i√ßin a≈üaƒüƒ±daki se√ßenekten se√ßiminizi yapƒ±n.",
        reply_markup=mediumquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("fifth"))
async def fifth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi %200 hacimde akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes seviyesini d√ºƒümelerle y√∂netmek istiyorsanƒ±z √∂nce Y√∂netici yardƒ±mcƒ±sƒ± olun.",
        reply_markup=fifth_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("fourth"))
async def fourth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi %150 hacimde akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes seviyesini d√ºƒümelerle y√∂netmek istiyorsanƒ±z √∂nce Y√∂netici yardƒ±mcƒ±sƒ± olun.",
        reply_markup=fourth_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("third"))
async def third(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi %100 hacimde akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes seviyesini d√ºƒümelerle y√∂netmek istiyorsanƒ±z √∂nce Y√∂netici yardƒ±mcƒ±sƒ± olun.",
        reply_markup=third_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)


@Client.on_callback_query(filters.regex("second"))
async def second(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi %50 hacimde akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes seviyesini d√ºƒümelerle y√∂netmek istiyorsanƒ±z √∂nce Y√∂netici yardƒ±mcƒ±sƒ± olun.",
        reply_markup=second_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)


@Client.on_callback_query(filters.regex("first"))
async def first(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Bunu yalnƒ±zca sesli sohbeti y√∂net iznine sahip y√∂netici yapabilir.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("≈ûimdi %20 hacimde akƒ±≈ü!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**Ses Kalitesini Y√∂net üîä**\n\nSes seviyesini d√ºƒümelerle y√∂netmek istiyorsanƒ±z √∂nce Y√∂netici yardƒ±mcƒ±sƒ± olun.",
        reply_markup=first_keyboard
    )
    else:
        await CallbackQuery.answer(f"Sesli sohbette hi√ßbir ≈üey √ßalmƒ±yor.", show_alert=True)

@Client.on_callback_query(filters.regex("nonabout"))
async def nonabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ƒ∞≈üte bununla ilgili bazƒ± temel bilgiler {BOT_NAME},Buradan bizimle ileti≈üime ge√ßebilir ve bize katƒ±labilirsiniz!**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("Destek üö∂", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("Kanal ü§ñ", url=f"https://t.me/{UPDATE}")
                ],
              [InlineKeyboardButton("üîô  Ana Men√º", callback_data="cbmenu")]]
        ),
    )


@Client.on_callback_query(filters.regex("dbconfirm"))
async def dbconfirm(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("Sen ƒ∞simsiz bir Y√∂neticisin!\n\nY√∂netici haklarƒ±ndan kullanƒ±cƒ± hesabƒ±na geri d√∂n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("Sadece y√∂neticiler bunu kullanƒ±r..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**Onay ‚ö†Ô∏è**\n\nSorgusunda akƒ±≈üƒ± sonlandƒ±rmak istediƒüinizden emin misiniz? {query.message.chat.title} ve Liste'deki t√ºm Sƒ±raya alƒ±nmƒ±≈ü ≈üarkƒ±larƒ± temizle ?**",

              reply_markup=dbclean_keyboard
         )
    else:
        await query.answer("≈üu anda hi√ßbir ≈üey akƒ±≈ü halinde deƒüil", show_alert=True)
